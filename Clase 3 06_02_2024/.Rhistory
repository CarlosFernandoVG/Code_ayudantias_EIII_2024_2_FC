knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
screen <- read_csv("Screentime - App Details.csv")
screen_inst <- screen %>% filter(App == "Instagram")
screen_whats <- screen %>% filter(App != "Instagram")
fts_inst <- ts(screen_inst$`Times opened`,
start = as.Date(min(screen_inst$Date),
format = "%m/%d/%Y"),
frequency = 365)
fts_whats <- ts(screen_whats$`Times opened`)
fts_inst
?ts
fts_inst
format = "%m/%d/%Y")
ts(screen_inst$`Times opened`,
start = as.Date(min(screen_inst$Date),
format = "%m/%d/%Y"))
as.Date(min(screen_inst$Date),
format = "%m/%d/%Y")
fecha_inicio <- as.Date(min(screen_inst$Date),
format = "%m/%d/%Y")
month(fecha_inicio)
day(fecha_inicio)
year(fecha_inicio)
ts(screen_inst$`Times opened`,
start = c(year(fecha_inicio), day(fecha_inicio)), frequency = 365)
fecha_inicio
fecha_inicio + 27
fecha_inicio
ts(screen_inst$`Times opened`,
start = c(year(fecha_inicio), days_in_month(fecha_inicio)), frequency = 365)
screen_inst
lubridate::yday(fecha_inicio)
ts(screen_inst$`Times opened`,
start = c(year(fecha_inicio), lubridate::yday(fecha_inicio)), frequency = 365)
fecha_inicio + 27
yday(fecha_inicio + 27)
yday(fecha_inicio + 26)
screen_inst
screen_whats
fecha_ini <- as.Date(min(screen_inst$Date),
format = "%m/%d/%Y")
fts_inst <- ts(screen_inst$`Times opened`,
start = c(year(fecha_inicio), lubridate::yday(fecha_inicio)), frequency = 365)
fts_whats <- ts(screen_whats$`Times opened`, start = c(year(fecha_inicio), lubridate::yday(fecha_inicio)), frequency = 365)
fts_inst
fts_whats
autolayer(fts_whats)
autoplot(fts_whats)
autoplot(fts_whats, color = "green") +
```
autoplot(fts_whats, color = "green")
autoplot(fts_whats, color = "green") +
autolayer(fts_inst, color = "pink")
install.packages("imputeTS")
library(imputeTS)
imputeTS::tsAirgapComplete
imputeTS::tsHeating
tsHeatingComplete
length(tsHeatingComplete)
lenght(imputeTS::tsHeating)
length(imputeTS::tsHeating)
length(tsNH4)
length(imputeTS::tsNH4)
length(imputeTS::tsNH4Complete)
imputeTS::tsNH4Complete
ggplot_na_distribution(tsAirgap)
tsAirgap
gplot_na_distribution(x = df$value, x_axis_labels = df$date)
ggplot_na_distribution(x = df$value, x_axis_labels = df$date)
ggplot_na_distribution(x = df$value, x_axis_labels = df$date)
ggplot_na_distribution2(tsNH4)
tsAirgap
knitr::opts_chunk$set(echo = TRUE)
tsNH4
tsNH4
library("imputeTS")
ggplot_na_distribution(tsAirgap)
install.packages("bbplot")
install.packages('devtools')
devtools::install_github('bbc/bbplot')
library(bbplot)
ggplot_na_distribution(tsAirgap) + bbc_style()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
screen <- read_csv("Screentime - App Details.csv")
fecha_ini <- as.Date(min(screen_inst$Date),
format = "%m/%d/%Y")
fecha_ini
ts(screen_inst$`Times opened`,
start = fecha_ini, frequency = 365)
?çts
fecha_ini
lubridate::year(fecha_ini)
screen_inst
lubridate::yday(fecha_ini)
ts(screen_inst$`Times opened`,
start = c(lubridate::year(fecha_ini), lubridate::yday(fecha_ini)), frequency = 365)
time_serie_inst <- ts(screen_inst$`Times opened`,
start = c(lubridate::year(fecha_ini), lubridate::yday(fecha_ini)), frequency = 365)
library(forecast)
autoplot(time_serie_inst)
screen <- read_csv("Screentime - App Details.csv")
screen <- read_csv("Screentime - App Details.csv")
screen_inst <- screen %>% filter(App == "Instagram")
screen_inst <- screen %>% filter(App == "Instagram")
screen_whats <- screen %>% filter(App != "Instagram")
fecha_ini <- as.Date(min(screen_inst$Date),
format = "%m/%d/%Y")
time_serie_inst <- ts(screen_inst$`Times opened`,
start = c(lubridate::year(fecha_ini), lubridate::yday(fecha_ini)), frequency = 365)
time_serie_what <- ts(screen_what$`Times opened`,
start = c(lubridate::year(fecha_ini), lubridate::yday(fecha_ini)), frequency = 365)
time_serie_what <- ts(screen_whats$`Times opened`,
start = c(lubridate::year(fecha_ini), lubridate::yday(fecha_ini)), frequency = 365)
autoplot(time_serie_inst) +
forecast::autolayer(time_serie_what)
autoplot(time_serie_inst, color = "pink") +
forecast::autolayer(time_serie_what, colour = "green")
autoplot(time_serie_inst, color = "pink") +
forecast::autolayer(time_serie_what, color = "green")
autoplot(time_serie_inst, color = "pink") +
forecast::autolayer(time_serie_what, color = "green") +
theme_minimal()
time_serie_inst
acf(time_serie_inst)
acf(time_serie_inst, plot = FALSE)
pacf(time_serie_inst, plot = FALSE)
ggAcf(time_serie_inst)
ggThemeAssist:::ggThemeAssistAddin()
ggPacf(time_serie_inst)
ggAcf(time_serie_inst) + ggPacf(time_serie_inst)
library(patchwork)
ggAcf(time_serie_inst) + ggPacf(time_serie_inst)
library(bbplot)
ggThemeAssist:::ggThemeAssistAddin()
(ggAcf(time_serie_inst) + bbc_style()) + (ggPacf(time_serie_inst) + bbc_style())
knitr::opts_chunk$set(echo = TRUE)
set.seed(10)
#Diferentes coeficientes para los modelos AR
ARcoefficients <- c(0.7, 0.2, -0.1)
#Vamos a simular y guardar todo en una lista
AR_models <- list()
for(p in 1:3){
AR_models[[p]] <- stats::arima.sim(n = 10000, list(ar = ARcoefficients[1:p]))
}
#Utilizamos una función creada para este material
series_plot(AR_models[[1]], 100, TRUE) /
series_plot(AR_models[[2]], 100) /
series_plot(AR_models[[3]], 100, FALSE, TRUE)
library(tidyverse)
library(patchwork)
#Utilizamos una función creada para este material
AR_models[[1]]
AR_models[[2]]
AR_models[[3]]
#Utilizamos una función creada para este material
AR_models[[1]] %>% autoplot()
#Utilizamos una función creada para este material
AR_models[[1]] %>% ggPacf()
AR_models[[1]]
AR_models[[1]][1:100]
plot_series_corr_plot <- function(serie, sample_max_time = NULL){
if (is.null(sample_max_time)){
plot_ts <- tibble(x = seq_along(serie), y = serie) %>%
ggplot(aes(x = x, y = y)) + theme_minimal() + ggtitle("Serie")
}else{
plot_ts <- tibble(x = seq_along(sample_max_time),
y = serie[1:sample_max_time]) %>%
ggplot(aes(x = x, y = y)) + theme_minimal() + ggtitle("Serie")
}
plot_Acf <- ggAcf(serie) + theme_minimal() + ggtitle("ACF")
plot_Pacf <- ggPacf(serie) + theme_minimal() + ggtitle("PACF")
plot_ts + plot_Acf + plot_Pacf
}
#Utilizamos una función creada para este material
AR_models[[1]] %>% plot_series_corr_plot(sample_max_time = 100)
plot_series_corr_plot <- function(serie, sample_max_time = NULL){
if (is.null(sample_max_time)){
plot_ts <- tibble(x = seq_along(serie), y = serie) %>%
ggplot(aes(x = x, y = y)) + theme_minimal() + ggtitle("Serie")
}else{
plot_ts <- tibble(x = seq(1, sample_max_time),
y = serie[1:sample_max_time]) %>%
ggplot(aes(x = x, y = y)) + theme_minimal() + ggtitle("Serie")
}
plot_Acf <- ggAcf(serie) + theme_minimal() + ggtitle("ACF")
plot_Pacf <- ggPacf(serie) + theme_minimal() + ggtitle("PACF")
plot_ts + plot_Acf + plot_Pacf
}
#Utilizamos una función creada para este material
AR_models[[1]] %>% plot_series_corr_plot(sample_max_time = 100)
plot_series_corr_plot <- function(serie, sample_max_time = NULL){
if (is.null(sample_max_time)){
plot_ts <- tibble(x = seq_along(serie), y = serie) %>%
ggplot(aes(x = x, y = y)) + geom_line() +
theme_minimal() + ggtitle("Serie")
}else{
plot_ts <- tibble(x = seq(1, sample_max_time),
y = serie[1:sample_max_time]) %>%
ggplot(aes(x = x, y = y)) + geom_line() +
theme_minimal() + ggtitle("Serie")
}
plot_Acf <- ggAcf(serie) + theme_minimal() + ggtitle("ACF")
plot_Pacf <- ggPacf(serie) + theme_minimal() + ggtitle("PACF")
plot_ts + plot_Acf + plot_Pacf
}
#Utilizamos una función creada para este material
AR_models[[1]] %>% plot_series_corr_plot(sample_max_time = 100)
#Utilizamos una función creada para este material
(AR_models[[1]] %>% plot_series_corr_plot(sample_max_time = 100)) /
(AR_models[[2]] %>% plot_series_corr_plot(sample_max_time = 100)) /
(AR_models[[3]] %>% plot_series_corr_plot(sample_max_time = 100))
set.seed(11)
#Diferentes coeficientes para los modelos AR
AMcoefficients <- c(0.7, 0.2, -0.1)
#Vamos a simular y guardar todo en una lista
AM_models <- list()
for(p in 1:3){
AM_models[[p]] <- stats::arima.sim(n = 10000, list(ma = AMcoefficients[1:p]))
}
(AM_models[[1]] %>% plot_series_corr_plot(sample_max_time = 100)) /
(AM_models[[2]] %>% plot_series_corr_plot(sample_max_time = 100)) /
(AM_models[[3]] %>% plot_series_corr_plot(sample_max_time = 100))
set.seed(15)
ARIMAmodel1 <- arima.sim(model = list(order = c(1, 0, 1), ar = .7,ma =.2), n = 1000)
ARIMAmodel2 <- arima.sim(model = list(order = c(2, 0, 2), ar = c(.7, 0.2),ma = c(-0.1, -0.3)), n = 1000)
(ARIMAmodel1 %>% plot_series_corr_plot(sample_max_time = 100)) /
(ARIMAmodel2 %>% plot_series_corr_plot(sample_max_time = 100))
set.seed(15)
ARIMAmodel1 <- arima.sim(model = list(order = c(1, 0, 1), ar = .7,ma =.2), n = 10000)
ARIMAmodel2 <- arima.sim(model = list(order = c(2, 0, 2), ar = c(.7, 0.2),ma = c(-0.1, -0.3)), n = 10000)
(ARIMAmodel1 %>% plot_series_corr_plot(sample_max_time = 100)) /
(ARIMAmodel2 %>% plot_series_corr_plot(sample_max_time = 100))
set.seed(15)
ARIMAmodel1 <- arima.sim(model = list(order = c(1, 0, 1), ar = .7,ma =.7), n = 10000)
ARIMAmodel2 <- arima.sim(model = list(order = c(2, 0, 2), ar = c(.7, 0.2),ma = c(-0.1, -0.3)), n = 10000)
(ARIMAmodel1 %>% plot_series_corr_plot(sample_max_time = 100)) /
(ARIMAmodel2 %>% plot_series_corr_plot(sample_max_time = 100))
set.seed(15)
ARIMAmodel1 <- arima.sim(model = list(order = c(1, 0, 1), ar = .7,ma =.9), n = 10000)
ARIMAmodel2 <- arima.sim(model = list(order = c(2, 0, 2), ar = c(.7, 0.2),ma = c(-0.1, -0.3)), n = 10000)
(ARIMAmodel1 %>% plot_series_corr_plot(sample_max_time = 100)) /
(ARIMAmodel2 %>% plot_series_corr_plot(sample_max_time = 100))
set.seed(15)
ARIMAmodel1 <- arima.sim(model = list(order = c(1, 0, 1), ar = .7,ma =.2), n = 10000)
ARIMAmodel2 <- arima.sim(model = list(order = c(2, 0, 2), ar = c(.7, 0.2),ma = c(-0.1, -0.3)), n = 10000)
(ARIMAmodel1 %>% plot_series_corr_plot(sample_max_time = 100)) /
(ARIMAmodel2 %>% plot_series_corr_plot(sample_max_time = 100))
set.seed(15)
ARIMAmodel1 <- arima.sim(model = list(order = c(1, 0, 1), ar = .3,ma =.2), n = 10000)
ARIMAmodel2 <- arima.sim(model = list(order = c(2, 0, 2), ar = c(.7, 0.2),ma = c(-0.1, -0.3)), n = 10000)
(ARIMAmodel1 %>% plot_series_corr_plot(sample_max_time = 100)) /
(ARIMAmodel2 %>% plot_series_corr_plot(sample_max_time = 100))
set.seed(15)
ARIMAmodel1 <- arima.sim(model = list(order = c(1, 0, 1), ar = .1,ma =.2), n = 10000)
ARIMAmodel2 <- arima.sim(model = list(order = c(2, 0, 2), ar = c(.7, 0.2),ma = c(-0.1, -0.3)), n = 10000)
(ARIMAmodel1 %>% plot_series_corr_plot(sample_max_time = 100)) /
(ARIMAmodel2 %>% plot_series_corr_plot(sample_max_time = 100))
set.seed(15)
ARIMAmodel1 <- arima.sim(model = list(order = c(1, 0, 1), ar = .2,ma =.2), n = 10000)
ARIMAmodel2 <- arima.sim(model = list(order = c(2, 0, 2), ar = c(.7, 0.2),ma = c(-0.1, -0.3)), n = 10000)
(ARIMAmodel1 %>% plot_series_corr_plot(sample_max_time = 100)) /
(ARIMAmodel2 %>% plot_series_corr_plot(sample_max_time = 100))
set.seed(15)
ARIMAmodel1 <- arima.sim(ar = .2,ma =.2, n = 10000)
set.seed(15)
ARIMAmodel1 <- arima.sim(model = list(ar = .7,ma =.7, n = 10000))
set.seed(15)
ARIMAmodel1 <- arima.sim(model = list(ar = .7,ma =.7), n = 10000)
ARIMAmodel2 <- arima.sim(model = list(ar = c(.7, 0.2), ma = c(-0.1, -0.3)), n = 10000)
(ARIMAmodel1 %>% plot_series_corr_plot(sample_max_time = 100)) /
(ARIMAmodel2 %>% plot_series_corr_plot(sample_max_time = 100))
set.seed(15)
ARIMAmodel1 <- arima.sim(model = list(ar = .7,ma =.7), n = 200)
ARIMAmodel2 <- arima.sim(model = list(ar = c(.7, 0.2), ma = c(-0.1, -0.3)), n = 10000)
(ARIMAmodel1 %>% plot_series_corr_plot(sample_max_time = 100)) /
(ARIMAmodel2 %>% plot_series_corr_plot(sample_max_time = 100))
set.seed(15)
ARIMAmodel1 <- arima.sim(model = list(ar = .7,ma =.7), n = 100)
ARIMAmodel2 <- arima.sim(model = list(ar = c(.7, 0.2), ma = c(-0.1, -0.3)), n = 10000)
(ARIMAmodel1 %>% plot_series_corr_plot(sample_max_time = 100)) /
(ARIMAmodel2 %>% plot_series_corr_plot(sample_max_time = 100))
AirPassengers
AirPassengers %>% plot_series_corr_plot()
AirPassengers %>% Arima(order = c(ar = 13))
AirPassengers %>% Arima(order = c(ar = 13, ma = 0))
AirPassengers %>% Arima(order = list((ar = 13, ma = 0)))
AirPassengers %>% Arima(order = c(13, 0, 0))
AirPassengers %>% Arima(order = c(13, 0, 0), method = "ML")
AirPassengers %>% Arima(order = c(4, 0, 0), method = "ML")
AirPassengers %>% Arima(order = c(4, 0, 0), method = "ML")
AirPassengers %>% diff()
AirPassengers %>% diff() %>% plot_series_corr_plot()
AirPassengers %>% diff() %>% Arima(order = c(13, 0, 0), method = "ML")
AirPassengers %>% diff() %>% Arima(order = c(23, 0, 0), method = "ML")
AirPassengers %>% diff() %>% Arima(order = c(12, 0, 0), method = "ML")
AirPassengers %>%  diff(lag = 12) %>% plot_series_corr_plot()
AirPassengers %>%  diff(lag = 12) %>% diff() %>% plot_series_corr_plot()
AirPassengers %>% log() %>%  diff(lag = 12) %>% diff() %>% plot_series_corr_plot()
AirPassengers %>%  diff(lag = 12) %>% diff() %>% plot_series_corr_plot()
AirPassengers %>% log() %>%  diff(lag = 12) %>% diff() %>% plot_series_corr_plot()
AirPassengers %>%  diff(lag = 12) %>%  %>% plot_series_corr_plot()
AirPassengers %>%  diff(lag = 12) %>%  plot_series_corr_plot()
AirPassengers %>% diff(lag = 12) %>% diff() %>%  plot_series_corr_plot()
AirPassengers %>% auto.arima()
AirPassengers %>% diff(lag = 12) %>% diff(lag = 12) %>% diff() %>%  plot_series_corr_plot()
AirPassengers %>% diff(lag = 12, differences = 2) %>% diff() %>%  plot_series_corr_plot()
AirPassengers %>% diff(lag = 12, differences = 2) %>% diff() %>%  plot_series_corr_plot()
AirPassengers %>% diff(lag = 12) %>% diff() %>%  plot_series_corr_plot()
AirPassengers %>% diff() %>%  plot_series_corr_plot()
AirPassengers %>%  plot_series_corr_plot()
AirPassengers %>% diff(lag = 12) %>% diff() %>%  plot_series_corr_plot()
AirPassengers %>% diff(lag = 12, differences = 2) %>% diff() %>%  plot_series_corr_plot()
AirPassengers %>% Arima(order = c(13, 1, 12), seasonal = (2, 2, 2, 12), method = "ML")
?Arima
AirPassengers %>% Arima(order = c(13, 1, 12), seasonal = list(order = (2, 2, 2),  period = 12)), method = "ML")
AirPassengers %>% Arima(order = c(13, 1, 12), seasonal = list(order = c(2, 2, 2),  period = 12), method = "ML")
strange_model <- AirPassengers %>% Arima(order = c(13, 1, 12), seasonal = list(order = c(2, 2, 2),  period = 12), method = "ML")
pretty_model <- AirPassengers %>% auto.arima()
pretty_model
pretty_model %>% forecast(h=12)
pretty_model %>% forecast(h=12) %>% autoplot()
pretty_model %>% forecast(h=24) %>% autoplot()
strange_model %>% forecast(h=24) %>% autoplot()
strange_model
pretty_model %>% forecast(h=50) %>% autoplot()
strange_model %>% forecast(h=50) %>% autoplot()
plot_series_corr_plot <- function(serie, sample_max_time = NULL){
if (is.null(sample_max_time)){
plot_ts <- tibble(x = seq_along(serie), y = serie) %>%
ggplot(aes(x = x, y = y)) + geom_line() +
theme_minimal() + ggtitle("Serie")
}else{
plot_ts <- tibble(x = seq(1, sample_max_time),
y = serie[1:sample_max_time]) %>%
ggplot(aes(x = x, y = y)) + geom_line() +
theme_minimal() + ggtitle("Serie")
}
plot_Acf <- ggAcf(serie) + theme_minimal() + ggtitle("ACF")
plot_Pacf <- ggPacf(serie) + theme_minimal() + ggtitle("PACF")
plot_ts + plot_Acf + plot_Pacf
}
set.seed(10)
#Diferentes coeficientes para los modelos AR
ARcoefficients <- c(0.7, 0.2, -0.1)
#Vamos a simular y guardar todo en una lista
AR_models <- list()
for(p in 1:3){
AR_models[[p]] <- stats::arima.sim(n = 10000, list(ar = ARcoefficients[1:p]))
}
#Utilizamos una función creada para este material
(AR_models[[1]] %>% plot_series_corr_plot(sample_max_time = 100)) /
(AR_models[[2]] %>% plot_series_corr_plot(sample_max_time = 100)) /
(AR_models[[3]] %>% plot_series_corr_plot(sample_max_time = 100))
set.seed(11)
#Diferentes coeficientes para los modelos AR
AMcoefficients <- c(0.7, 0.2, -0.1)
#Vamos a simular y guardar todo en una lista
AM_models <- list()
for(p in 1:3){
AM_models[[p]] <- stats::arima.sim(n = 10000, list(ma = AMcoefficients[1:p]))
}
(AM_models[[1]] %>% plot_series_corr_plot(sample_max_time = 100)) /
(AM_models[[2]] %>% plot_series_corr_plot(sample_max_time = 100)) /
(AM_models[[3]] %>% plot_series_corr_plot(sample_max_time = 100))
set.seed(15)
ARIMAmodel1 <- arima.sim(model = list(ar = .7, ma =.7), n = 100)
ARIMAmodel2 <- arima.sim(model = list(ar = c(.7, 0.2), ma = c(-0.1, -0.3)), n = 10000)
(ARIMAmodel1 %>% plot_series_corr_plot(sample_max_time = 100)) /
(ARIMAmodel2 %>% plot_series_corr_plot(sample_max_time = 100))
ARIMAmodel2 %>% plot_series_corr_plot(sample_max_time = 100)
ARIMAmodel2
Arima(ARIMAmodel2, order = c(2, 0, 2))
Arima(ARIMAmodel2, order = c(4, 0, 0))
Arima(ARIMAmodel2, order = c(5, 0, 0))
AirPassengers %>% Arima(order = (2, 0, 0))
AirPassengers %>% Arima(order = c(2, 0, 0))
m <- AirPassengers %>% Arima(order = c(2, 0, 0))
m
m$aicc
m$bic
m$aic
for (coef in c(2, 3, 4, 12)){
print(coef)
m <- AirPassengers %>% Arima(order = c(2, 0, 0))
print(m$aicc)
print(m$bic)
print(m$aic)
}
for (coef in c(2, 3, 4, 12)){
print(coef)
m <- AirPassengers %>% Arima(order = c(coef, 0, 0))
print(m$aicc)
print(m$bic)
print(m$aic)
}
?Arime
?Arima
for (coef in c(2, 3, 4, 12)){
print(coef)
m <- AirPassengers %>% Arima(order = c(coef, 0, 0), model = "ML")
print(m$aicc)
print(m$bic)
print(m$aic)
}
AirPassengers %>% Arima(order = c(coef, 0, 0), model = "ML")
AirPassengers %>% Arima(order = c(2, 0, 0), model = "ML")
Arima(AirPassengers, order = c(2, 0, 0), model = "ML")
for (coef in c(2, 3, 4, 12)){
print(coef)
m <- AirPassengers %>% Arima(order = c(coef, 0, 0), method = "ML")
print(m$aicc)
print(m$bic)
print(m$aic)
}
plot_series_corr_plot <- function(serie, sample_max_time = NULL){
if (is.null(sample_max_time)){
plot_ts <- tibble(x = seq_along(serie), y = serie) %>%
ggplot(aes(x = x, y = y)) + geom_line() +
theme_minimal() + ggtitle("Serie")
}else{
plot_ts <- tibble(x = seq(1, sample_max_time),
y = serie[1:sample_max_time]) %>%
ggplot(aes(x = x, y = y)) + geom_line() +
theme_minimal() + ggtitle("Serie")
}
plot_Acf <- ggAcf(serie, lag.max = 100) + theme_minimal() + ggtitle("ACF")
plot_Pacf <- ggPacf(serie, lag.max = 100) + theme_minimal() + ggtitle("PACF")
plot_ts + plot_Acf + plot_Pacf
}
AirPassengers %>% diff() %>% plot_series_corr_plot()
AirPassengers %>% Arima(order = c(13, 1, 0), method = "ML")
AirPassengers %>% auto.arima()
forecast::ndiffs(AirPassengers)
forecast::nsdiffs(AirPassengers)
AirPassengers %>% diff(12) %>% autoplot()
AirPassengers %>% diff(1, lag = 12) %>% autoplot()
(AirPassengers %>% diff(1, lag = 12) %>% autoplot()) +
(AirPassengers %>% diff(12) %>% autoplot())
AirPassengers
AirPassengers[1:2]
AirPassengers[1:2] %>% diff()
AirPassengers[1:2]
AirPassengers[1:3]
AirPassengers[1:3] %>% diff() %>% diff()
AirPassengers[1:4]
AirPassengers[1:4] %>% diff() %>% diff()
AirPassengers[1:4] %>% diff() %>% diff() %>% diff()
AirPassengers[1:4] %>% diff() %>% diff() %>% diff(3)
AirPassengers %>% auto.arima()
AirPassengers %>% diff() %>% auto.arima()
AirPassengers %>% diff() %>% diff(1, lag = 12) %>% auto.arima()
AirPassengers %>% diff(1, lag = 12) %>% diff() %>% auto.arima()
AirPassengers %>% log() %>% diff(1, lag = 12) %>% diff() %>% auto.arima()
AirPassengers %>% log() %>% auto.arima()
AirPassengers %>% log() %>% plot_series_corr_plot()
(AirPassengers %>% autoplot()) + (AirPassengers %>% log()%>% autoplot())
(AirPassengers %>% autoplot()) + (AirPassengers %>% sqrt()%>% autoplot())
BoxCox.lambda(AirPassengers)
AirPassengers %>% log() %>% auto.arima()
AirPassengers %>% auto.arima()
AirPassengers %>% auto.arima()
AirPassengers %>% auto.arima()
AirPassengers %>% auto.arima()
AirPassengers %>% log() %>% auto.arima()
AirPassengers %>% BoxCox(BoxCox.lambda(AirPassengers)) %>% auto.arima()
?forecast
?forecast::forecast
AirPassengers
air_std <- AirPassengers %>% auto.arima()
air_std <- AirPassengers %>% auto.arima()
air_log <- AirPassengers %>% log() %>% auto.arima()
air_box <- AirPassengers %>% BoxCox(BoxCox.lambda(AirPassengers)) %>% auto.arima()
(air_std %>% forecast(h = 24) %>% autoplot()) +
(air_log %>% forecast(h = 24) %>% autoplot()) +
(air_box %>% forecast(h = 24) %>% autoplot())
air_log %>% forecast(h = 24) %>% exp() %>% autoplot()
air_log %>% forecast(h = 24)
prediction <- air_log %>% forecast(h = 24)
prediction$x <- exp(prediction$x)
prediction$mean <- exp(prediction$mean)
prediction$lower <- exp(prediction$lower)
prediction$upper <- exp(prediction$upper)
prediction %>% autoplot()
air_std %>% forecast(h = 24) %>% autoplot()
prediction <- air_box %>% forecast(h = 24)
prediction$x <- InvBoxCox(prediction$x, BoxCox.lambda(AirPassengers))
prediction$mean <- InvBoxCox(prediction$mean, BoxCox.lambda(AirPassengers))
prediction$lower <- InvBoxCox(prediction$lower, BoxCox.lambda(AirPassengers))
prediction$upper <- InvBoxCox(prediction$upper, BoxCox.lambda(AirPassengers))
prediction %>% autoplot()
air_box %>% forecast(h = 24)
